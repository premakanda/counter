{"version":3,"sources":["Number.jsx","Button.jsx","Item.jsx","reducer.js","App.jsx","serviceWorker.js","store.js","index.js"],"names":["Number","props","newClassName","counterError","displayCounter","errorInputStart","errorInputMax","isDisplayValue","counter","className","Button","onClick","callback","disabled","title","Item","inputClassName","error","type","placeholder","value","onChange","event","onChangeInput","currentTarget","disabledInput","INPUT_START","INPUT_MAX","INPUT_SET","INPUT_INC","INPUT_RESET","SET_STATE","initialState","maxValue","startValue","resetDisabled","incDisabled","setDisabled","App","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","state","getItem","parse","setRestoreState","onChangeInputStart","currentValue","onChangeInputMax","currentVal","changeSet","changeInc","changeReset","render","inputError","this","React","Component","ConnectedApp","connect","dispatch","action","inputStartAC","inputMaxAC","setRestoreStateAC","Boolean","window","location","hostname","match","store","createStore","valueStart","valueMax","isMaxvalue","newCounter","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7d4e84a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Number = (props) => {\r\n    let newClassName = props.counterError ? 'item counterError' : 'item';\r\n\r\n    let displayCounter = props.errorInputStart || props.errorInputMax ? 'Некорректное значение' : props.isDisplayValue ? 'Enter value and press SET' : props.counter\r\n\r\n    return (\r\n        <div className=\"counterItem\">\r\n            <span className={newClassName}>{displayCounter}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Number;\r\n","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\r\n    return (\r\n        <button onClick={props.callback} className={'button'} disabled={props.disabled}>\r\n            {props.title}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst Item = (props) => {\r\n    let inputClassName = props.error ? 'input inputValue' : 'input';\r\n\r\n    return (\r\n        <label>{props.title}\r\n            <input className={inputClassName} type=\"number\"\r\n                   placeholder={props.value}\r\n                   onChange={ (event) => {props.onChangeInput(Number(event.currentTarget.value))}}\r\n                   disabled={props.disabledInput}\r\n                   value={props.value}/>\r\n\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\n\r\nexport const INPUT_START = \"App/Reducer/INPUT-START\";\r\nexport const INPUT_MAX = \"App/Reducer/INPUT-MAX\";\r\nexport const INPUT_SET = \"App/Reducer/INPUT-SET\";\r\nexport const INPUT_INC = \"App/Reducer/INPUT-INC\";\r\nexport const INPUT_RESET = \"App/Reducer/INPUT-RESET\";\r\nexport const SET_STATE = \"App/Reducer/SET-STATE\";\r\n\r\n\r\nconst initialState = {\r\n        counter: 0,\r\n        maxValue: 2,\r\n        startValue: 0,\r\n        resetDisabled: false,\r\n        incDisabled: false,\r\n        setDisabled: true,\r\n        isDisplayValue: false,\r\n        counterError: false,\r\n        errorInputStart: false,\r\n        errorInputMax: false\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INPUT_START:\r\n            let valueStart = false;\r\n            if (action.currentValue < 0 || action.currentValue >= state.startValue) {\r\n                valueStart = true;\r\n            }\r\n            return {\r\n                ...state,\r\n                resetDisabled: true,\r\n                incDisabled: true,\r\n                startValue: action.currentValue,\r\n                isDisplayValue: true,\r\n                setDisabled:  valueStart,\r\n                errorInputStart:  valueStart\r\n            }\r\n        case INPUT_MAX:\r\n            let valueMax = false;\r\n            if (action.currentVal < 0 || action.currentVal === state.startValue || action.currentVal < state.startValue) {\r\n                valueMax = true;\r\n            }\r\n            return {\r\n                ...state,\r\n                resetDisabled: true,\r\n                incDisabled: true,\r\n                maxValue: action.currentVal,\r\n                isDisplayValue: true,\r\n\r\n                setDisabled: valueMax,\r\n                errorInputMax: valueMax\r\n            }\r\n        case INPUT_SET:\r\n            return {\r\n                ...state,\r\n                setDisabled: true,\r\n                resetDisabled: false,\r\n                incDisabled: false,\r\n                isMaxvalue: true,\r\n                counter: state.startValue,\r\n                isDisplayValue: false\r\n            }\r\n        case INPUT_INC:\r\n            let newCounter = state.counter + 1;\r\n            if (state.counter >= state.maxValue) {\r\n                return {\r\n                    ...state,\r\n                    incDisabled: true,\r\n                    counterError: true,\r\n                    resetDisabled: false\r\n                }\r\n            }\r\n            return {\r\n                ...state, counter: newCounter\r\n            }\r\n\r\n            case INPUT_RESET:\r\n            return {\r\n                ...state,\r\n                counter: state.startValue,\r\n                incDisabled: false,\r\n                counterError: false,\r\n                resetDisabled: true\r\n            }\r\n        case SET_STATE:\r\n            return {\r\n                ...action.state\r\n            }\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const inputStartAC = (currentValue) => {\r\n    return {type: INPUT_START, currentValue}\r\n};\r\n\r\nexport const inputMaxAC = (currentVal) => {\r\n    return {type: INPUT_MAX, currentVal}\r\n};\r\nexport const inputSetAC = () => {\r\n    return {type: INPUT_SET}\r\n};\r\nexport const inputIncAC = () => {\r\n    return {type: INPUT_INC}\r\n};\r\nexport const inputResetAC = () => {\r\n    return {type: INPUT_RESET}\r\n};\r\nexport const setRestoreStateAC = (state) => {\r\n    return {type: SET_STATE, state}\r\n};","import React from 'react';\nimport './App.css';\nimport Number from './Number';\nimport Button from './Button';\nimport Item from './Item';\nimport {inputStartAC, inputMaxAC, inputSetAC, inputIncAC, inputResetAC, setRestoreStateAC} from \"./reducer\";\nimport {connect} from \"react-redux\";\n\nclass App extends React.Component {\n    // state = {\n    //     counter: 0,\n    //     maxValue: 2,\n    //     startValue: 0,\n    //     resetDisabled: false,\n    //     incDisabled: false,\n    //     setDisabled: true,\n    //     isDisplayValue: false,\n    //     counterError: false,\n    //     errorInputStart: false,\n    //     errorInputMax: false\n    // }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.props);\n        localStorage.setItem(\"count\", stateAsString)\n    }\n\n    restoreState = () => {\n        let state = this.props;\n        let stateAsString = localStorage.getItem(\"count\");\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString)\n        }\n        this.props.setRestoreState(state)\n        // this.setState(state)\n    }\n\n    onChangeInputStart = (currentValue) => {\n        this.props.onChangeInputStart(currentValue);\n        // this.setState({\n        //     setDisabled: false,\n        //     resetDisabled: true,\n        //     incDisabled: true,\n        //     startValue: currentValue,\n        //     isDisplayValue: true,\n        //     errorInputStart: false\n        // });\n        // if (currentValue < 0 || currentValue >= this.state.startValue) {\n        //     this.setState({\n        //         setDisabled: true,\n        //         errorInputStart: true\n        //     });\n        // }\n    }\n\n    onChangeInputMax = (currentVal) => {\n        this.props.onChangeInputMax(currentVal);\n\n        // this.setState({\n        //     setDisabled: false,\n        //     resetDisabled: true,\n        //     incDisabled: true,\n        //     maxValue: currentVal,\n        //     isDisplayValue: true,\n        //     errorInputMax: false\n        // });\n        // if (currentVal < 0 || currentVal === this.props.state.startValue || currentVal < this.props.state.startValue) {\n        //     this.setState({\n        //         setDisabled: true,\n        //         errorInputMax: true\n        //     });\n        // }\n    }\n\n    changeSet = () => {\n        this.props.changeSet();\n        // this.setState({\n        //     setDisabled: true,\n        //     resetDisabled: false,\n        //     incDisabled: false,\n        //     isMaxvalue: true,\n        //     counter: this.state.startValue,\n        //     isDisplayValue: false\n        // })\n        this.saveState()\n    }\n\n    changeInc = () => {\n        this.props.changeInc();\n        // this.setState({\n        //     counter: this.props.state.counter + 1\n        // }, () => {\n        //     if (this.props.state.counter >= this.props.state.maxValue) {\n        //         this.setState({\n        //             incDisabled: true,\n        //             counterError: true,\n        //             resetDisabled: false\n        //         })\n        //     }\n        // });\n    }\n\n    changeReset = () => {\n        this.props.changeReset();\n        // this.setState({\n        //     counter: this.props.startValue,\n        //     incDisabled: false,\n        //     counterError: false,\n        //     resetDisabled: true\n        // });\n    }\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"counter\">\n                    <div className=\"counterInput\">\n                        <Item title={'max value:'}\n                              value={this.props.maxValue}\n                              error={this.props.error}\n                              onChangeInput={this.onChangeInputMax}\n                              inputError={this.props.errorInputMax}/>\n                        <Item title={'start value:'}\n                              value={this.props.startValue}\n                              onChangeInput={this.onChangeInputStart}\n                              inputError={this.props.errorInputStart}\n                              error={this.props.error}\n                        />\n                    </div>\n                    <div className=\"blockBtn\">\n                        <Button title={'set'} callback={this.changeSet} disabled={this.props.setDisabled}/>\n                    </div>\n                </div>\n                <div className=\"counter\">\n                    <Number counterError={this.props.counterError}\n                            counter={this.props.counter}\n                            errorInputStart={this.props.errorInputStart}\n                            errorInputMax={this.props.errorInputMax}\n                            isDisplayValue={this.props.isDisplayValue}\n                    />\n                    <div className=\"counterBtn\">\n                        <Button title={'inc'} callback={this.changeInc} disabled={this.props.incDisabled}/>\n                        <Button title={'reset'} callback={this.changeReset} disabled={this.props.resetDisabled}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        maxValue: state.maxValue,\n        error: state.error,\n        errorInputMax: state.errorInputMax,\n        startValue: state.startValue,\n        errorInputStart: state.errorInputStart,\n        counterError: state.counterError,\n        counter: state.counter,\n        isDisplayValue: state.isDisplayValue,\n        incDisabled: state.incDisabled,\n        resetDisabled: state.resetDisabled,\n        setDisabled: state.setDisabled\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onChangeInputStart: (currentValue) => {\n            const action = inputStartAC(currentValue);\n            dispatch(action)\n        },\n        onChangeInputMax: (currentVal) => {\n            const action = inputMaxAC(currentVal);\n            dispatch(action)\n        },\n        changeSet: () => {\n            const action = inputSetAC();\n            dispatch(action)\n        },\n        changeInc: () => {\n            const action = inputIncAC();\n            dispatch(action)\n        },\n        changeReset: () => {\n            const action = inputResetAC();\n            dispatch(action)\n        },\n        setRestoreState: (state) => {\n            const action = setRestoreStateAC(state);\n            dispatch(action)\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}